name: Run Movie Reporter

on:
  # Run manually
  workflow_dispatch:
  # Run daily at 6 AM UTC
  schedule:
    - cron: '0 6 * * *'
  # Run on push to main branch
  push:
    branches: [ main ]

jobs:
  scrape-movies:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg ca-certificates
        
    - name: Install Google Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: Install Playwright browsers
      run: |
        npx playwright install chromium
        npx playwright install-deps chromium
        
    - name: Verify Chrome installation
      run: |
        echo "Chrome version:"
        google-chrome-stable --version
        echo "Chrome executable path:"
        which google-chrome-stable
        echo "Playwright browsers:"
        npx playwright --version
        
    - name: Create Playwright config
      run: |
        cat > playwright.config.js << 'EOF'
        module.exports = {
          use: {
            channel: 'chrome',
            headless: true,
          },
          projects: [
            {
              name: 'chromium',
              use: {
                channel: 'chrome',
                headless: true,
              },
            },
          ],
        };
        EOF
      
    - name: Install dependencies
      run: npm ci
      
    - name: Create data directory
      run: mkdir -p data
      
    - name: Run movie reporter
      run: npm start
      env:
        # Add any environment variables your app needs
        NODE_ENV: production
        # Playwright environment variables for headless operation
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "false"
        # Ensure Playwright uses the system Chrome
        PLAYWRIGHT_CHROMIUM_EXECUTABLE_PATH: "/usr/bin/google-chrome-stable"
        # Force Playwright to use system Chrome
        PLAYWRIGHT_BROWSERS_PATH: "/usr/bin"
        
    - name: Check for generated files
      run: |
        echo "Generated files:"
        ls -la data/
        if [ -f "index.html" ]; then
          echo "✅ Report generated successfully"
        else
          echo "❌ Report generation failed"
          exit 1
        fi
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/ index.html
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🤖 Auto-update movie data and report [skip ci]"
          git push
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: movie-report
        path: |
          data/
          index.html
        retention-days: 30

  # Optional: Create a release with the report
  create-release:
    needs: scrape-movies
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: movie-report
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v$(date +'%Y.%m.%d')"
        name: "Movie Report $(date +'%Y-%m-%d')"
        body: |
          📽️ Automated movie report from ForumCinemas
          
          Generated on: $(date)
          Movies found: $(cat data/movies_enriched.json | jq '. | length')
          
          Check the attached files for the complete report.
        files: |
          data/movies_enriched.json
          data/now_playing.json
          index.html
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
